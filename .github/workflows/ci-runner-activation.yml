name: CI Runner - Activation Test
on:
  repository_dispatch:
    types: [ cd-test-activation ]
jobs:
  ci-runner-activation:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    env:
      QIT_DOCKER_PHP: 'yes'
      QIT_DOCKER_NGINX: 'yes'
      QIT_DOCKER_REDIS: 'no'
      QIT_DOCKER_MYSQL: 'yes'
      # JOB_ENV_START
      PHP_EXTENSIONS: ${{ toJSON( matrix.test_run.environment.php_extensions ) }}
      QIT_ENABLE_HPOS: ${{ toJSON( matrix.test_run.environment.optional_features.hpos ) }}
      QIT_ENABLE_NEW_PRODUCT_EDITOR: ${{ toJSON( matrix.test_run.environment.optional_features.new_product_editor ) }}
      PHP_VERSION: ${{ github.event.client_payload.shared_matrix_data.php_version }}
      WOOCOMMERCE_VERSION: ${{ matrix.test_run.environment.woocommerce_version }}
      WORDPRESS_VERSION: ${{ matrix.test_run.environment.wordpress_version }}
      SUT_SLUG: ${{ matrix.test_run.sut_slug }}
      TEST_TYPE: ${{ matrix.test_run.test_type }}
      SUT_VERSION: Undefined
      # JOB_ENV_END
      SKIP_ACTIVATING_WOOCOMMERCE: yes
    strategy:
      fail-fast: false
      matrix:
        test_run: ${{ github.event.client_payload.test_runs }}
    steps:
      # HEADER_START
      - name: Daily Cache Burst.
        run: echo "daily-cache-burst=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        
      - name: Yesterday Cache Burst.
        run: echo "yesterday-cache-burst=$(date -u -d 'yesterday' +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Set dynamic environment variables.
        run: |
          echo "TEST_TYPE_CACHE_DIR=$GITHUB_WORKSPACE/ci/cache/test-type/${{ matrix.test_run.test_type }}" >> $GITHUB_ENV
          echo "WP_CLI_CACHE_DIR=$GITHUB_WORKSPACE/ci/cache/test-type/${{ matrix.test_run.test_type }}/wp-cli" >> $GITHUB_ENV
          echo "PLAYWRIGHT_BROWSERS_PATH=$GITHUB_WORKSPACE/ci/cache/test-type/${{ matrix.test_run.test_type }}/playwright-browsers" >> $GITHUB_ENV
        
      - name: Plugin Under Test - ${{ matrix.test_run.sut_name }}
        run: echo "Starting test for plugin \"${{ matrix.test_run.sut_name }}\""
        
      - name: Checkout code.
        uses: actions/checkout@v4
      # HEADER_END

      # CLI_SETUP
      - name: CI CLI Cache
        id: cache-ci-cli
        uses: actions/cache@v3
        with:
          path: ci/cli/vendor
          key: ${{ hashFiles( 'ci/cli/composer.lock' ) }}

      - name: CI CLI Setup
        if: steps.cache-ci-cli.outputs.cache-hit != 'true'
        working-directory: ci/cli
        run: composer install --no-interaction --no-progress --no-suggest --prefer-dist --optimize-autoloader --no-dev
      # CLI_SETUP_END

      # UPDATE_TEST_STATUS_START
      - name: Notify Manager That Test Has Started
        if: ${{ matrix.test_run.custom_payload.is_mass_test != 'yes' }}
        id: test-in-progress
        working-directory: ci/cli
        env:
          TEST_RUN_ID: ${{ matrix.test_run.test_run_id }}
          CI_SECRET: ${{ secrets.CI_SECRET }}
          CI_STAGING_SECRET: ${{ secrets.CI_STAGING_SECRET }}
          MANAGER_HOST: ${{ github.event.client_payload.shared_matrix_data.manager_host }}
          RESULTS_ENDPOINT: ${{ github.event.client_payload.shared_matrix_data.in_progress_endpoint }}
          TEST_RUN_HASH: ${{ matrix.test_run.custom_payload.hash }}
          WORKFLOW_ID: ${{ github.run_id }}
          CANCELLED: ${{ steps.workflow-cancelled.outputs.cancelled }}
        run: php src/cli.php notify -s
      # UPDATE_TEST_STATUS_END

      # TEST_TYPE_CACHE_START
      - name: Restore Test Type Cache (WP CLI Cache (WP zips, plugins zips, etc), Playwright cache if needed, etc)
        id: cache-qit-daily-test-type
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: false
          path: ci/cache/test-type
          key: ${{ env.daily-cache-burst }}-test-type-${{ matrix.test_run.test_type }}-${{ matrix.test_run.environment.woocommerce_version }}-${{ matrix.test_run.environment.wordpress_version }}
          restore-keys: | # Allow to restore from last day cache if current day doesn't exist.
            ${{ env.yesterday-cache-burst }}-test-type-${{ matrix.test_run.test_type }}-${{ matrix.test_run.environment.woocommerce_version }}-${{ matrix.test_run.environment.wordpress_version }}
      # TEST_TYPE_CACHE_END

      # DOCKER_CACHE_START
      - name: Restore Bundle Docker Image Cache
        id: cache-docker-bundle
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: false
          path: ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}
          key: ${{ env.daily-cache-burst }}-cache-docker-bundle-php-${{ github.event.client_payload.shared_matrix_data.php_version }}
          restore-keys: | # Allow to restore from last day cache if current day doesn't exist.
            ${{ env.yesterday-cache-burst }}-cache-docker-bundle-php-${{ github.event.client_payload.shared_matrix_data.php_version }}

      - name: Restore Redis Image from Bundle
        if: env.QIT_DOCKER_REDIS == 'yes'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/redis/image.tar

      - name: Restore MySQL Image from Bundle
        if: env.QIT_DOCKER_MYSQL == 'yes'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/mysql/image.tar

      - name: Restore PHP Image from Bundle
        if: env.QIT_DOCKER_PHP == 'yes'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/image.tar

      - name: Restore Nginx Image from Bundle
        if: env.QIT_DOCKER_NGINX == 'yes'
        run: docker image load --input ./ci/cache/docker/bundle/php-${{ github.event.client_payload.shared_matrix_data.php_version }}/nginx/image.tar
      # DOCKER_CACHE_END

      - name: Setup PHP
        uses: shivammathur/setup-php@baf9535ba58ae8ac3a7362d932ca85fc38621a5d
        with:
          tools: none
          # PS: This PHP version is unrelated to which PHP version will run the test. This is only to run the scripts in GitHub.
          php-version: '7.4'
          ini-values: "memory_limit=1G"

      - name: Debug Docker
        working-directory: ci
        run: docker --version

      - name: Debug Docker Composer
        working-directory: ci
        run: docker compose version

      - name: Create base dir.
        run: mkdir -p ./ci/compatibility

      # DOWNLOAD_PLUGINS_START
      - name: Create Plugin Directories
        working-directory: ci
        run: mkdir -p plugins & mkdir -p themes
      
      - name: Download Plugin Activation Stack
        working-directory: ci/cli
        env:
          TOKEN: ${{ secrets.TOKEN }}
          ACCEPT_HEADER: ${{ secrets.ACCEPT_HEADER }}
          WOO_DOWNLOAD_URL: ${{ secrets.WOO_DOWNLOAD_URL }}
          SHA_URL: ${{ secrets.SHA_URL }}
          CI_ENCRYPTION_KEY: ${{ secrets.CI_ENCRYPTION_KEY }}
          SHA_POSTFIELDS: ${{ secrets.SHA_POSTFIELDS }}
          PLUGINS_ZIPS: ${{ toJSON( github.event.client_payload.shared_matrix_data.plugin_zips ) }}
          PLUGINS_JSON: ${{ toJSON( matrix.test_run.plugins ) }}
          THEME_DIRECTORY: ${{ github.workspace }}/ci/themes
          PLUGIN_DIRECTORY: ${{ github.workspace }}/ci/plugins
          SKIP_CACHE: true
        run: php src/cli.php download-plugins
      # DOWNLOAD_PLUGINS_END

      # SUT_VERSION_START
      - name: Get SUT version (Debug)
        if: always()
        run: ls -la $GITHUB_WORKSPACE/ci/${{ matrix.test_run.sut_type }}s && ls -la $GITHUB_WORKSPACE/ci/${{ matrix.test_run.sut_type }}s/${{ matrix.test_run.sut_slug }}
        
      - name: Get SUT version (Debug)
        if: always()
        id: sut-version
        working-directory: ci/cli
        env:
          PLUGIN_DIRECTORY: ${{ github.workspace }}/ci/${{ matrix.test_run.sut_type }}s/${{ matrix.test_run.sut_slug }}
          PLUGIN_TYPE: ${{ matrix.test_run.sut_type }}
          PLUGIN_SLUG: ${{ matrix.test_run.sut_slug }}
        run: php src/cli.php header -o Version
      # SUT_VERSION_END

      - name: Debug Plugin List
        working-directory: ci
        run: test -d ./plugins && ls -la ./plugins

      - name: Debug Theme List
        working-directory: ci
        run: test -d ./themes && ls -la ./themes

      - name: Create compatibility-results.txt file
        run: echo '[]' > ci/tests/compatibility/compatibility-results.txt

      - name: Create stderr.txt file
        run: echo '[]' > ci/tests/compatibility/cd-stderr.txt

      - name: Generate docker-compose
        env:
          PHP_VERSION: ${{ github.event.client_payload.shared_matrix_data.php_version }}
          VOLUMES: '{
            "/ci/plugins": "ci/plugins",
            "/ci/themes": "ci/themes",
            "/ci/tests/compatibility": "ci/tests/compatibility",
            "/ci/tests/compatibility/compatibility-stderr-logger.php": "/var/www/html/compatibility-stderr-logger.php",
            "/ci/tests/compatibility/cd-stderr.txt": "/var/www/html/wp-content/mu-plugins/cd-stderr.txt",
            "/ci/tests/compatibility/compatibility-results.txt": "/var/www/html/wp-content/mu-plugins/compatibility-results.txt",
            "/ci/tests/compatibility/compatibility-tests-error-checker.php": "/var/www/html/wp-content/mu-plugins/compatibility-tests-error-checker.php"
          }'
        run: php ./ci/bin/create-docker-compose.php

      - name: Debug Docker Compose
        run: cat ./ci/bin/docker-compose.yml

      - name: Get UID and GID
        run: |
          echo "FIXUID=$(id -u)" >> $GITHUB_ENV
          echo "FIXGID=$(id -g)" >> $GITHUB_ENV

      - name: Start Docker Compose
        working-directory: ci/bin
        timeout-minutes: 5
        env:
          FIXUID: ${{ env.FIXUID }}
          FIXGID: ${{ env.FIXGID }}
        run: docker compose up -d

      - name: Check Docker Compose Logs
        working-directory: ci/bin
        run: docker compose logs ci_runner_php_fpm

      - name: Debug WP-CLI
        working-directory: ci/bin
        run: docker exec --user=www-data ci_runner_php_fpm bash -c "wp --info"

      - name: Setup WordPress
        working-directory: ci/bin
        run: ./wordpress-setup.sh

      - name: Debug wp-config.php
        working-directory: ci/bin
        run: docker exec --user=root ci_runner_php_fpm bash -c "cat /var/www/html/wp-config.php"

      # THEME_ACTIVATION
      - name: Maybe Install Parent Theme
        if: ${{ matrix.test_run.sut_type == 'theme' }}
        working-directory: ci/cli
        env:
          PLUGIN_DIRECTORY: ${{ github.workspace }}/ci/themes/${{ matrix.test_run.sut_slug }}
          PLUGIN_ENTRYPOINT: ${{ github.workspace }}/ci/themes/${{ matrix.test_run.sut_slug }}/style.css
        run: php src/cli.php theme -p

      - name: Maybe Activate Theme
        if: ${{ matrix.test_run.sut_type == 'theme' && matrix.test_run.test_type != 'activation' }}
        working-directory: ci/bin
        run: docker exec --user=www-data ci_runner_php_fpm bash -c "wp theme activate ${{ matrix.test_run.sut_slug }}"
      # THEME_ACTIVATION_END

      # DEBUG_PLUGIN_LISTS
      - name: Debug Plugin List
        if: ${{ matrix.test_run.sut_type != 'theme' }}
        working-directory: ci/bin
        run: docker exec --user=www-data ci_runner_php_fpm bash -c "wp plugin list"

      - name: Debug Theme List
        if: ${{ matrix.test_run.sut_type == 'theme' }}
        working-directory: ci/bin
        run: docker exec --user=www-data ci_runner_php_fpm bash -c "wp theme list"
      # DEBUG_PLUGIN_LISTS_END

      - name: Disable WP_DEBUG_LOG
        run: docker exec --user=www-data ci_runner_php_fpm bash -c "wp config set WP_DEBUG_LOG false --raw"

      - name: Run Activation Tests
        id: run-activation-tests
        env:
          SUT_ID: ${{ matrix.test_run.sut_woo_id }}
          TEST_TYPE: activation
          CI_SECRET: ${{ secrets.CI_SECRET }}
          CI_STAGING_SECRET: ${{ secrets.CI_STAGING_SECRET }}
          MANAGER_HOST: ${{ github.event.client_payload.shared_matrix_data.manager_host }}
          SUT_TYPE: ${{ matrix.test_run.sut_type }}
        run: php ./ci/tests/compatibility/compatibility-test.php

      - name: Debug Activation Results
        run: cat ./ci/tests/compatibility/compatibility-results.txt || exit 0

      - name: Workflow Cancelled
        id: workflow-cancelled
        if: cancelled()
        run: echo "cancelled=1" >> "$GITHUB_OUTPUT"

      - name: Send test result
        if: always()
        working-directory: ci/cli
        run: php src/cli.php notify -r
        env:
          TEST_RUN_ID: ${{ matrix.test_run.test_run_id }}
          CI_SECRET: ${{ secrets.CI_SECRET }}
          CI_STAGING_SECRET: ${{ secrets.CI_STAGING_SECRET }}
          MANAGER_HOST: ${{ github.event.client_payload.shared_matrix_data.manager_host }}
          RESULTS_ENDPOINT: ${{ github.event.client_payload.shared_matrix_data.results_endpoint }}
          TEST_RESULT: ${{ steps.run-activation-tests.outcome }} # Result will be determined by Manager after parsing the JSON.
          TEST_RESULT_JSON: tests/compatibility/compatibility-results.txt
          WORKSPACE: ${{ github.workspace }}/ci
          SUT_VERSION: ${{ steps.sut-version.outputs.header }}
          CANCELLED: ${{ steps.workflow-cancelled.outputs.cancelled }}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-artifacts
          path: ci/tests/compatibility/compatibility-results.txt
          retention-days: 1